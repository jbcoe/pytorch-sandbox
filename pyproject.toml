[project]
name = "xyz-pytorch-sandbox"
description = "A place to play with pytorch."
dynamic = ["version"]
requires-python = "~=3.12"
dependencies = [
    "mlflow>=2.21.2",
    "numpy>=2.2.4",
    "psutil>=7.0.0",
    "psycopg2-binary>=2.9.10",
    "torch~=2.7.0",
    "torchdata>=0.11.0",
    "torchvision>=0.21.0",
]

[dependency-groups]
dev = ["mypy>=1.15.0", "pre-commit>=4.2.0", "pytest>=8.3.5", "ruff>=0.11.2"]

[project.scripts]
mnist-demo = "xyz.pytorch.sandbox.mnist.demo:main"
mnist-train = "xyz.pytorch.sandbox.mnist.train:main"
mnist-viewer = "xyz.pytorch.sandbox.data.loading:main"
intro-temperature = "xyz.pytorch.sandbox.intro.temperature:main"

[project.urls]
"GitHub" = "https://github.com/jbcoe/pytorch-sandbox"

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [
    "B",      # Bugbear
    "C901",   # complex-structure. # TODO: Enable this check.
    "D",      # Docstrings
    "E",      # Pycodestyle
    "F",      # Pyflakes
    "I",      # Isort
    "ICN003", # banned-import-from
    "W",      # Pycodestyle
]
ignore = [
    "D107", # Missing docstring in `__init__`.
    "D104", # Missing docstring in public package.
    "D401", # First line of docstring should be in imperative mood.
    "D415", # First line should end with a period, question mark, or exclamation point.
    "D400", # First line should end with a period.
    "D105", # Missing docstring in magic method.
    "D203", # `no-blank-line-before-class`.
    "D212", # `multi-line-summary-second-line`.
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.ruff.lint.isort]
known-third-party = ["mlflow"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402", # import violations
]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["mlflow.*"]
follow_imports = "skip"

[tool.coverage.run]
concurrency = ["thread", "multiprocessing"]
source = ["."]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["*_test.py"]

[tool.uv.workspace]
members = ["docker/mlflow"]

[tool.uv.sources]
"xyz-mlflow-server" = { workspace = true }
